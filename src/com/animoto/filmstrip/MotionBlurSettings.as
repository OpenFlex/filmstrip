package com.animoto.filmstrip
{
	import flash.display.BlendMode;
	import flash.geom.Point;
	
	/**
	 * These settings are used depending on your filmStrip's blurMode and captureMode settings.
	 * 
	 * Change any of these settings in your program's setup code to customize blur output.
	 * For example the following will result in a much heavier blur:
	 * <pre>
	 * MotionBlurSettings.strength = 2;
	 * MotionBlurSettings.maxSubframes = 32;
	 * MotionBlurSettings.millisecondsPerSubframe = 2;
	 * </pre>
	 * @author moses gunesch
	 */
	public class MotionBlurSettings
	{
		public static const CAMERA_BLUR_NONE:Number = 0;
		
		public static const CAMERA_BLUR_NATURAL:Number = 0.5;
		
		public static const CAMERA_BLUR_ABSOLUTE:Number = 1;
		
		// -== Global Blur Settings. ==-
		
		/**
		 * General multiplier factored into subframe calculation (greater than zero).
		 */
		public static var strength:Number = 1;
		
		/**
		 * Maximum number of captures per frame (1 or higher).
		 */
		public static var maxFrames:uint = 16;
		
		/**
		 * Milliseconds animation is changed each frame (1 or higher, higher numbers
		 * have the effect of spreading subframes apart).
		 */
		public static var subframeDuration:Number = 1;
		
		/**
		 * Use -1 or 1 for either a trailing blur or "forward" blur, respectively.
		 * (Wish list item: allow in-between values to pan blur in both directions)
		 */
		public static var offset: Number = -1.0;
		
		/**
		 * Typically NORMAL works although subframes can have the effect of darkening
		 * the target -- LIGHTEN looks pretty good when matting subframes.
		 */
		public static var blendMode: String = BlendMode.NORMAL;

		/**
		 * Maximum amount of alpha for the first subframe; others will be less (0-1).
		 */
		public static var peakAlpha: Number = 0.25;
		
		/**
		 * A standard BlurFilter applied to each capture softens edges of subframes.
		 */
		public static var applyBoxBlur: Boolean = true;
		
		/**
		 * Low and high limits for box blur, if applyBoxBlur is true.
		 */
		public static var boxBlurRange: Point = new Point(1.5, 3.0);
		
		/**
		 * Subframe step multiplier for box blur, if applyBoxBlur is true.
		 */
		public static var boxBlurMultiplier: Number = 0.1;
		
		/**
		 * When false, the number of subframes is estimated based on the target object's motion.
		 */
		public static var useFixedFrameCount: Boolean = false;
		
		/**
		 * If usefixedFrameCount is true, each frame will draw this many subframes.
		 */
		public static var fixedFrameCount: int = 10;
		
		/**
		 * Subframes required for blur to be processed (1 or higher), usefixedFrameCount is false.
		 */
		public static var threshold:int = 1;
		
		/**
		 * (Advanced) Proportionally changes the influence of rotation values on blur amount.
		 * Try setting this value if the blur seems too weak or strong during rotations.
		 */
		public static var rotationMultiplier:Number = 1;
		
		/**
		 * (Advanced) A 0-1 multiplier defining how much camera motion is factored into blur. 
		 * 
		 * Both CAMERA_BLUR_NONE and CAMERA_BLUR_ABSOLUTE are faster than CAMERA_BLUR_NATURAL
		 * when the camera is animated. (For 2D scenes the scene sprite is treated as the camera.)
		 * <br>
		 * <ul>
		 * <li>When both the camera and scene contents are animated, CAMERA_BLUR_NATURAL dampens 
		 * camera animation which blends with object motion nicely. This constant is set at 0.5
		 * but you can also set cameraBlurPercent to any number between 0 and 1 to fine-tune
		 * the balance, for example a value of 0.25 would allow less camera blur.</li>
		 * 
		 * <li>CAMERA_BLUR_ABSOLUTE leaves all animation intact which can create strong blurs 
		 * based solely on fast camera movement. In this setting if an object is moving to the 
		 * right and the camera pans faster to the left, the object will appear to blur the
		 * wrong direction, but it can also lend to some interesting effects. (Setting this 
		 * number higher than 1 will exaggerate camera blur.)</li>
		 * 
		 * <li>CAMERA_BLUR_NONE retains the full motion blur of scene objects without factoring
		 * any camera motion into subframes. This can look less natural for fast camera moves,
		 * but may look fine and render faster with slow camera animations.</li>
		 * </ul>
		 */
		public static var cameraBlurPercent:Number = CAMERA_BLUR_NATURAL;
		
		/**
		 * Estimates subframe count based on frameRate, delta, and settings.
		 * 
		 * @param frameRate			FilmStrip.frameRate value
		 * @param compoundDelta		Value generated by a DeltaManager instance
		 * @return 					Number of motion-blur subframes if above threshold setting.
		 * 
		 */
		public static function getSubframeCount( frameRate:int, compoundDelta:Number ):int {
			
			// TODO: factor camera3D movement into compound delta..?
			
			// Allows strength to be a more intuitive value where 1 is relatively normal.
			var strengthMultiplier: Number = 0.25;
			
			// adjust for current render framerate, using a constant of 30fps (approximates video standard)
			var frameRateMult: Number = frameRate / 30;
			
			var frames:int = Math.min(maxFrames-1, (compoundDelta * frameRateMult * strength * strengthMultiplier));
			
			return (frames < threshold) ? 0 : frames;
		}
	}
}